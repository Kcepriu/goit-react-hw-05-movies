{"version":3,"file":"static/js/475.bdeb9866.chunk.js","mappings":"oMAuBA,EApBmB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAMG,KAAI,SAAAC,GACT,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAQE,IAAMC,MAAO,CAAEC,KAAMP,GAAlD,SACGG,EAAQK,SAFJL,EAAQE,GAMpB,KAGN,C,sJC2BD,EAvCa,WACX,OAAgCI,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOV,EAAP,KAAca,EAAd,KAEQC,GAAkBC,EAAAA,EAAAA,KAAlBD,cA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,2FACEN,GAAY,GADd,kBAGgCE,EAAcK,cAAc,CAAEF,WAAAA,IAH9D,OAGUG,EAHV,OAIIP,EAASO,EAAcC,SAJ3B,gDAMIR,EAAS,IACTS,QAAQC,IAAI,eAPhB,yBASIX,GAAY,GAThB,6EAHc,sBAkBd,OAlBc,mCAgBdY,GAEO,WACLP,EAAWQ,OACZ,CACF,GAAE,CAACX,KAIF,iCACE,2CACCH,IAAY,SAACe,EAAA,EAAD,IACZ1B,EAAM2B,OAAS,IAAK,SAACC,EAAA,EAAD,CAAY5B,MAAOA,MAG7C,C","sources":["components/MoviesList/MoviesList.js","pages/Home/Home.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ films }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {films.map(element => {\n        return (\n          <li key={element.id}>\n            <Link to={`/movies/${element.id}`} state={{ from: location }}>\n              {element.title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\nexport default MoviesList;\n","import { useEffect, useState } from 'react';\nimport { useContextFetchFilm } from 'components/ContextFetchFilm/ContextFetchFilm';\n\nimport Loader from 'components/Loader';\nimport MoviesList from 'components/MoviesList';\n\nconst Home = () => {\n  const [showLoad, setShowLoad] = useState(false);\n  const [films, setFilms] = useState([]);\n  // * Беру контекст для роботи із APIзапросами\n  const { apiThemoviedb } = useContextFetchFilm();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function fetchFilms() {\n      setShowLoad(true);\n      try {\n        const trandingFilms = await apiThemoviedb.fetchTrending({ controller });\n        setFilms(trandingFilms.results);\n      } catch {\n        setFilms([]);\n        console.log('Error fetch');\n      } finally {\n        setShowLoad(false);\n      }\n    }\n\n    fetchFilms();\n\n    return () => {\n      controller.abort();\n    };\n  }, [apiThemoviedb]);\n  // ! З попререднім рядком нема проблем? Не треба мемозувати apiThemoviedb??\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      {showLoad && <Loader />}\n      {films.length > 0 && <MoviesList films={films} />}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["films","location","useLocation","map","element","to","id","state","from","title","useState","showLoad","setShowLoad","setFilms","apiThemoviedb","useContextFetchFilm","useEffect","controller","AbortController","fetchTrending","trandingFilms","results","console","log","fetchFilms","abort","Loader","length","MoviesList"],"sourceRoot":""}